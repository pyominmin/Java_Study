//Hash Map과 HashSet은 Hashtable이용 - 검색속도 최고(중복x, 순서x)
//TreeSet과 TreeMap은 R-BT이용 - 항상 정렬된 상태를 유지(범위 검색은 이게 빠르다)

*Hashtable
배열에서 찾고자 하는 값이 있을 때 한번에 접근 가능

해싱(hashing): 데이터를 가급적 고유한 수의 값으로 표현하는 작업
해시함수(hash function) : 데이터로부터 고유한 수의 값을 계산하는 함수

*해시함수(hash function)
해시 값을 배열의 인덱스로 사용해서 key값을 저장
해시 테이블의 버킷(bucket)에 저장

*해싱
만약 해시테이블의 크기가 7인 경우 7로 나눈 나머지 값을 구한다.
7로 나눈 나머지 값이 0인 경우 0번째 방에 간다. 정렬된 상태가 유지되지 않는다.

만약 92라는 원소를 추가하는경우? a[1] 버킷에 이미 키값이 저장되어 있기 때문에 충돌(collision)발생
