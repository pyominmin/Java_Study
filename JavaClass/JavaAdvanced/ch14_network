소켓 프로그래밍(Socket Programming)
  
소켓 프로그래밍이란 소켓을 이용하여 네트워크 프로그래밍을 하는 것을 의미한다. 소켓이란 네트워크 상에서 프로세스 간 통신을 가능케 하는 엔드포인트(endpoint)를 나타낸다. 
소켓은 일종의 통신 도구로 클라이언트와 서버 간의 양방향 통신을 담당한다. 소켓은 특정 포트 번호와 연결 되어 있다. 
소켓을 아래와 같이 비유할 수 있다.

전화기 (Socket): 각각의 디바이스나 프로세스에 해당하는 소켓은 전화기에 비유될 수 있다. 전화기가 상대방과 통화하기 위한 수단인 것 처럼 소켓은 프로세스 간 통신을 위한 수단이다.

전화번호 (IP 주소 및 Port): 휴대폰은 고유한 번호를 가지며, 이를 통해 상대방을 식별할 수 있다. 마찬가지로 소켓은 IP 주소와 포트 번호를 통해 특정 프로세스를 식별할 수 있다.

통화 (Data Exchange): 전화기를 통해 음성이나 데이터를 주고받듯이, 소켓을 통해 프로세스는 데이터를 주고받는다.

통화 연결과 종료 (Connection Establishment and Termination): 전화를 걸고 받는 과정은 소켓에서의 연결과 종료로 볼 수 있다. 양쪽에서 합의하고 통화를 종료할 수 있습니다.

*TCP
-신뢰성 있는 연결 설정을 지향 프로토콜
  ex)이메일, 웹 사이트, 파일 전송
-연결방식 1:1

  *UDP
-신뢰성 없는 비연결성 프로토콜
  ex)실시간 방송, 음성통화, 온라인 게임
- 연결방식 1:1, 1:n, n:n

TCP소켓 프로그래밍
TCP를 이용한 소켓 프로그래밍은 서버와 클라이언트 간의 안정적이고 연결 지향적인 통신을 제공한다. 서버는 클라이언트의 연결 요청을 수락하고, 양측은 데이터를 주고 받을 수 있다.

​

TCP 소켓 프로그래밍 단계는 아래와 같다.

1. 서버 소켓 생성
2. 클라이언트 소켓 생성 및 서버에 연결
3. 서버에서 클라이언트 연결 수락
4. 데이터 송수신
5. 소켓 닫기

//------------------------------------------------------------------------------------------------------------------------------------------------------//

2. 클라이언트 소켓 생성 및 서버에 연결
package chap36_network;

import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

public class _06_Client {

	public static void main(String[] args) {
		
		Socket socket = null;
		
		//소켓 생성해서 서버로 연결 요청
		//"127.0.0.1" : localhost
		try {
			socket = new Socket("127.0.0.1", 12345);
			System.out.println("클라이언트가 127.0.0.1서버로 연결 요청을 했습니다.");
		} catch (UnknownHostException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			try {
				if(socket != null)
				socket.close();
			} catch (IOException e1) {
				
				e1.printStackTrace();
			}
			e.printStackTrace();
		}

	}

}

3. 서버에서 클라이언트 연결 수락
4. 데이터 송수신
5. 소켓 닫기

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class _05_Server {

	public static void main(String[] args) {

		ServerSocket server = null;
		Socket socket = null;
		try {// 12345포트 번호로 서버 소켓 생성
			server = new ServerSocket(12345);// 0 ~ 65535 사이의 포트 번호로 설정 가능 - 0 ~ 1023은 FTP등 이미 사용 중
			System.out.println("서버가 시작되었습니다.");
			System.out.println("클라이언트로부터 연결 대기중입니다.");
			
			//대기중인 서버가 클라이언트로부터 연결 요청이 들어오면 소켓을 생성해서 연결 수락
			socket = server.accept();//내부적으로 서버에서 소켓 생성
			System.out.println("클라이언트와 연결되었습니다.");
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if(server != null)
				server.close();
				if(socket != null)
				socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}


1. chat 만들기

*클라이언트

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class Client {

	public static void main(String[] args) {
		Socket socket = null;
		BufferedReader br = null;
		BufferedWriter bw = null;
		Scanner in = new Scanner(System.in);
		try {
			socket = new Socket("localhost", 23457);
			System.out.println("클라이언트가 소켓을 생성해서 서버로 연결을 요청했습니다.");
			
			br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			
			while(true) {//보내는거 부터
				System.out.print("Client>>전송할 메시지를 입력하세요: ");
				String outMsg = in.nextLine();
				bw.write(outMsg + "\n");
				bw.flush();//바로 전송
				
//				if(outMsg.equalsIgnoreCase("exit")) {
//					bw.write("exit\n");
//					bw.flush();
//				}
				
				String inMsg = br.readLine();
				System.out.println("서버로부터 메시지가 도착했습니다.: " + inMsg);
			}
		} catch (UnknownHostException e) {
				try {
					if(in != null)
						in.close();
					if(bw != null)
						bw.close();
					if(br != null)
						br.close();
					if (socket != null)
						socket.close();
				} catch (IOException e1) {

					e1.printStackTrace();
				}
			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}

	}

}

*서버

//import java.io.BufferedReader;
//import java.io.BufferedWriter;
//import java.io.IOException;
//import java.io.InputStreamReader;
//import java.io.OutputStreamWriter;
import java.io.*;
//import java.net.ServerSocket;
//import java.net.Socket;
import java.net.*;
import java.util.Scanner;

public class Server {

	public static void main(String[] args) {
		ServerSocket server = null;
		Socket socket = null;
		//InputStreamReader is = null;
		//OutputStreamWriter os = null;
		
		//실행 성능 향상
		BufferedReader br = null;
		BufferedWriter bw = null;
		Scanner in = new Scanner(System.in);

		try {
			server = new ServerSocket(23457);
			System.out.println("서버가 실행됐습니다.");
			System.out.println("클라이언트로부터 연결 대기중입니다...");
			
			//대기중인 서버가 소켓을 생성해서 클라이언트로부터 연결을 허용한다.
			server.accept();
			System.out.println("클라이언트와 연결되었습니다.");
			
//			is = new InputStreamReader(socket.getInputStream());
//			os = new OutputStreamWriter(socket.getOutputStream());
//		
//			br = new BufferedReader(is);
//			bw = new BufferedWriter(os);
			
			br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			
			while(true) {
				//1. 서버는 클라이언트로부터 메시지를 받는다.(br)
				//2. 받은 메시지를 화면에 출력한다.
				//3. 메시지를 입력 받아 클라이언트로 보낸다.(bw)
				String inMsg = br.readLine();//메시지를 행 단위로 받는다.
				
				if(inMsg.equalsIgnoreCase("exit")) {
					System.out.println("클라이언트가 나갔습니다.");
					break;
				}
				System.out.println("클라이언트로부터 메시지가 도착했습니다 : " + inMsg);
				
				System.out.print("Server>>전송할 메시지를 입력하세요 : ");
				String outMsg = in.nextLine();
				bw.write(outMsg + "\n");//클라이언트에서 메시지를 받는다.
				bw.flush();//출력 버퍼의 내용을 비운다. => 바로 전송
			}
			
		} catch (IOException e) {

				try {
					if(in != null)
						in.close();
					if(bw != null)
						bw.close();
					if(br != null)
						br.close();
					if (socket != null)
						socket.close();
					
					if (server != null)
						server.close();
				
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

			e.printStackTrace();
		}

	}

}
