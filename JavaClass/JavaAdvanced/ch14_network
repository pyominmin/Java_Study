소켓 프로그래밍(Socket Programming)
  
소켓 프로그래밍이란 소켓을 이용하여 네트워크 프로그래밍을 하는 것을 의미한다. 소켓이란 네트워크 상에서 프로세스 간 통신을 가능케 하는 엔드포인트(endpoint)를 나타낸다. 
소켓은 일종의 통신 도구로 클라이언트와 서버 간의 양방향 통신을 담당한다. 소켓은 특정 포트 번호와 연결 되어 있다. 
소켓을 아래와 같이 비유할 수 있다.

전화기 (Socket): 각각의 디바이스나 프로세스에 해당하는 소켓은 전화기에 비유될 수 있다. 전화기가 상대방과 통화하기 위한 수단인 것 처럼 소켓은 프로세스 간 통신을 위한 수단이다.

전화번호 (IP 주소 및 Port): 휴대폰은 고유한 번호를 가지며, 이를 통해 상대방을 식별할 수 있다. 마찬가지로 소켓은 IP 주소와 포트 번호를 통해 특정 프로세스를 식별할 수 있다.

통화 (Data Exchange): 전화기를 통해 음성이나 데이터를 주고받듯이, 소켓을 통해 프로세스는 데이터를 주고받는다.

통화 연결과 종료 (Connection Establishment and Termination): 전화를 걸고 받는 과정은 소켓에서의 연결과 종료로 볼 수 있다. 양쪽에서 합의하고 통화를 종료할 수 있습니다.

*TCP
-신뢰성 있는 연결 설정을 지향 프로토콜
  ex)이메일, 웹 사이트, 파일 전송
-연결방식 1:1

  *UDP
-신뢰성 없는 비연결성 프로토콜
  ex)실시간 방송, 음성통화, 온라인 게임
- 연결방식 1:1, 1:n, n:n

TCP소켓 프로그래밍
TCP를 이용한 소켓 프로그래밍은 서버와 클라이언트 간의 안정적이고 연결 지향적인 통신을 제공한다. 서버는 클라이언트의 연결 요청을 수락하고, 양측은 데이터를 주고 받을 수 있다.

​

TCP 소켓 프로그래밍 단계는 아래와 같다.

1. 서버 소켓 생성
2. 클라이언트 소켓 생성 및 서버에 연결
3. 서버에서 클라이언트 연결 수락
4. 데이터 송수신
5. 소켓 닫기

//------------------------------------------------------------------------------------------------------------------------------------------------------//
1. 서버소켓 생성


import java.net.InetAddress;
import java.net.UnknownHostException;

public class _01_InetAdress {

	public static void main(String[] args) {
		try {
			InetAddress adr = InetAddress.getByName("www.naver.com");//도메인명으로 얻어오기
		
			System.out.println("HostName: " + adr.getHostName());
			System.out.println("IP Address: " + adr.getHostAddress());
		} catch (UnknownHostException e) { 
			e.printStackTrace();
		}

		
		try {
			InetAddress adr = InetAddress.getByName("192.168.100.1");//IP주소로 얻어오기
		
			System.out.println("HostName: " + adr.getHostName());
			System.out.println("IP Address: " + adr.getHostAddress());
		} catch (UnknownHostException e) { 
			e.printStackTrace();
		}

		
	}

}

2. 클라이언트 소켓 생성 및 서버에 연결

