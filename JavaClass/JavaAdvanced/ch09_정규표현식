정규 표현식(Regular Expression)은 문자열을 처리하는 데 사용되는 강력한 도구로, 특정한 패턴을 정의하고 이러한 패턴을 검색, 대체, 추출하는 등의 문자열 작업을 수행하는 데 도움이 됩니다. 


일반적인 정규 표현식의 기호 및 역할은 아래와 같다.

1. 캐릭터 클래스(Character Classes) 

문자 클래스는 문자열  중 하나와 일치합니다. 

[aeiou] : 'a', e, 'i', 'o', 'u' 중에 하나와 일치하면 참

[0-9] : 0부터 9까지의 숫자와 일치하면 참

[^0-9] : 숫자가 아닌 문자와 일치하면 참

[A-Z] : 대문자와 일치하면 참

[a-z] : 소문자와 일치하면 참

[A-Za-z] : 영문자와 일치하면 참


2. 메타문자(Metacharacters)

정규 표현식에서 특별한 의미를 가진 문자를 메타문자라고 합니다.

. (마침표) : 줄바꿈을 제외한 한 개의 문자와 일치합니다. 예를 들어, "a.c"는 "abc", "a1c" 등을 포함합니다.

+ (1회 이상 반복) : 앞에 오는 패턴이 1회 이상 반복될 때 일치합니다. 예를 들어, "ba+"는 "ba", "baa", "baaa" 등에 일치하지만 "b", "a"는 일치하지 않습니다.

? (0회 또는 1회 반복) : 앞에 오는 패턴이 0회 또는 1회 반복될 때 일치합니다. 예를 들어, "ba?"는 "b" 또는 "ba"에 일치합니다.

[] (문자 클래스) : 대괄호 안에 있는 문자 중 하나와 일치합니다. 예를 들어, "[aeiou]"는 모음과 일치하며, "apple"의 모든 모음에 일치합니다.

| (or) : 패턴의 or 조건을 나타냅니다. 예를 들어, "a|b"는 "a" 또는 "b"에 일치합니다.

* (0회 이상 반복) : 앞에 오는 패턴이 0회 이상 반복될 때 일치합니다. 예를 들어, "ba*"는 "b", "ba", "baa", "baaa", "aa" 등에 일치합니다.

\ (백슬래시) :  문자 그대로 일치

(e.g. \\는 단일 백슬래시를 말한다.)



3. 앵커(Anchors)

앵커는 문자열에서 위치를 말합니다.

^ (시작) : 문자열의 시작을 나타내며, 주어진 패턴이 문자열의 시작 부분과 일치해야 합니다. 예를 들어, "^a"는 "apple"의 "a"와 일치하지만 "banana"의 "b"와는 일치하지 않습니다.
  
$ (끝) : 문자열의 끝을 나타내며, 주어진 패턴이 문자열의 끝 부분과 일치해야 합니다. 예를 들어, "e$"는 "apple"의 "e"와 일치하지만 "banana"의 "a"와는 일치하지 않습니다.

메타문자와 엥커를 이용해 이메일 주소를 찾는 패턴을 정의할 수 있습니다. 이메일 주소 패턴은 일반적으로 [^@]+@[^@]+\.[^@]+와 같이 표현됩니다. 이것은 "@" 기호를 기준으로 이메일 주소의 형태를 정의하는 것으로, "@"를 기준으로 앞에는 최소한 한 개 이상의 문자가 와야 하고, 그 뒤에는 "@"가 와야 하며, 마지막으로 마침표를 포함한 문자열이 뒤따라야 합니다.


4. 정량화(Quantifiers)

여기서는 문자, 그룹 또는 문자 클래스의 인스턴스 수를 지정합니다. 

​

{n} : 정확히 'n'개 일치

{n,} : 'n' 이상의 항목과 일치

{n,m} : 'n'과(와) 'm' 사이의 항목과 일치
