객체지향
object orianted progrem(oop)
1. 객체
2. 클래스
3. 추상화
4. 캡슐화
5. 다형성
6. 상속성

ex,데이터 - 눈은 2개 코길이 2, 몸무게 1톤, 다리 4개, 귀 2개
    기능 - 과자를 코로 받음, 코로 샤워함

코끼리라는 객체를 가지고 프로그래밍을 할 때 코끼리의 데이터적인 표현은 변수로 표현한다(weight, lengs, eyes) , 기능적인 표현(코로 샤워, 코로 받기)은 메서드로(함수) 한다.
데이터 표현과 기능 표현을 합친 것이 class이다.

class elephant{//클래스는 코끼리가 아니라 코끼리에 대한 정의 이다.(추상화 작업)// 코끼리는 main에서 elephant라는 변수를 선언해야 생긴다.
double weight;
int nose length;
int eyes;
int feet;
}
void eat(int apple){
eat apple
}
void shower(int water){
shower with water
}
main{// 실제 변수를 선언해야 코끼리가 생성된다. //클래스에서 나온 변수를 객체라고 한다.
elephant e1; (코끼리 1)
elephant e2; (코끼리 2)

}

//클래스는 객체를 뽑아내기 위한 틀이다.
*추상화 작업(핵심만 뽑아내는 것) -> 지하철 노선표는 현실세계와 똑같이 그려놓은 것이 아니라 핵심이 되는 부분만 뽑아서 놓은 것이다.

ex, 붕어빵 - 붕어빵 틀에 재료를(슈크림, 팥, 딸기잼 등) 넣는다. 1. 빠르게 2. 균일하게 만들 수 있다.
붕어빵 틀 - 클래스
붕어빵의 변수 
딸기잼 - 붕어빵1(변수)객체
슈크림 - 붕어빵2(변수)객체

ex, 아파트 설계도 - 클래스// 설계도가 없으면 엉망으로 건설하지만 있다면 균일하게 건설할 수 있다.
아파트 - 객체
아파트의 중요한 부분을 뽑아내는 것(추상화)

ex, 가루약
알약 안의 성분을 다 분석해서 먹지 않고 감기약 이라는 이름을 보고 약을 먹는다.
감기약의 성분을 다 분석하고 먹을 필요가 없다.

*캡슐화
클래스 안에서 기능을 동작하게 만들어놓고 공개정보를 통해 다른 개발자가 클래스에 접근할 수 있도록 한다.

*객체지향 프로그램
세세하게 코드를 짜지 않고 클래스들을 블록을 맞추듯이 끼워서 코드를 프로그래밍을 하는 방식
 - 빠르게 개발할 수 있다. 요즘 대부분 캡슐화가 되어있다.
그러므로 모든 객체지향 프로그래밍의 단위는 클래스이다. 즉 클래스 안에 있는 변수에 메모리가 할당된다.

*지금부터는 클래스를 이용해서 디자인을 할 것이다.
*클래스로 프로그래밍을 하는 이유는 대형 프로잭트를 하기 위한 것이다. 
*자바 파일 하나당 클래스 하나(public class는 단 하나만 존재해야 한다.)가 좋다.



